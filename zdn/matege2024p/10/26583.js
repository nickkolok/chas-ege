(function() { 'use strict'; retryWhileError(function() {
	/* Два велосипедиста одновременно отправились в 140-километровый пробег. Первый ехал со скоростью на 4 км/ч большей, чем скорость второго, и прибыл к финишу на 4 часа раньше второго. Найдите скорость велосипедиста, пришедшего к финишу первым. Ответ дайте в км/ч. */

	let a = sl(1, 20, 1);
	let x = sl([a + 1, 10].maxE(), 70);
	let S = sl(1, 300, 1);
	let n = S/(x-a) - S/x;

	genAssert((n*4).isAlmostInteger(), 'Часы должны быть почти целыми');

	let the_vehicleRacingOnRoad = sklonlxkand([
		"автомобиль","мотоцикл","велосипед","электросамокат","гироскутер","мотоциклист","велосипедист","гонщик","грузовик","автомобилист"
	].iz()); //
	let the_orderToFind = decor.orderToFind.iz(); // ["найдите","определите","вычислите"]

	NAtask.setTask({
		text:
			'Два ' + the_vehicleRacingOnRoad.re +' одновременно отправились в ' + S + '-километровый пробег. '+
			'Первый ехал со скоростью на ' + a + ' км/ч большей, '+
			'чем скорость второго, '+
			'и прибыл ' + ['к финишу', 'в пункт назначения'].iz() + ' на ' + chislitlx(n, 'час') + ' раньше второго. ',
		questions: [
			{
				text:  the_orderToFind.toZagl() +' скорость ' + the_vehicleRacingOnRoad.re + ', ' + [
					'финишировавшего первым. ',
					'пришедшего ' + ['к финишу', 'в пункт назначения'].iz() + ' первым. ',
					'первым пришедшего ' + ['к финишу', 'в пункт назначения'].iz() + '. ',
				].iz(),
				answers: x,
			},
			{
				text:  the_orderToFind.toZagl() +' скорость ' + the_vehicleRacingOnRoad.re + ', ' + [
					'финишировавшего вторым. ',
					'пришедшего ' + ['к финишу', 'в пункт назначения'].iz() + ' вторым. ',
					'вторым пришедшего ' + ['к финишу', 'в пункт назначения'].iz() + '. ',
				].iz(),
				answers: x - a,
			},
		],
		postquestion: ' Ответ дайте в км/ч.',
		analys: 'Скорости: ' + x + ' км/ч и ' + (x-a) + ' км/ч',
		authors: ['Николай Авдеев'],
	});
	NAtask.modifiers.allDecimalsToStandard();
}, 2000);})();
// РешуЕГЭ:
// 26583: 5675 39305 525405 5677 5679 5681 5683 5685 39259 39261 39263 39265 39267 39269 39271 39273 39275 39277 39279 39281 39283 39285 39287 39289 39291 39293 39295 39297 39299 39301 39303
// 26584: 5659 39349 5661 5663 5665 5667 5669 5671 5673 39307 39309 39311 39313 39315 39317 39319 39321 39323 39325 39327 39329 39331 39333 39335 39337 39339 39341 39343 39345 39347
