(function() {
	retryWhileError(function() {
		NAinfo.requireApiVersion(0, 2);

		let v0 = sl(10,100,0.01);//скорость1
		let v1 = sl(10,100,0.01);//скорость2
		let v2 = sl(10,100,0.01);//скорость3
		let s0 = sl(0.1,3,0.01)*v0;//путь1
		let s1 = sl(0.1,3,0.01)*v1;//путь2
		let s2 = sl(0.1,3,0.01)*v2;//путь3
		let v_avg=(s0+s1+s2)/(s0/v0+s1/v1+s2/v2);//средняя скорость
		//TODO:заменить на встроенный массив транспорта
		let transp = sklonlxkand(['автомобиль','мотоцикл','велосипед','электросамокат','гироскутер','мотоциклист','велосипедист','машина','поезд','транспортное средство'].iz());
		let kmph = '~\\dfrac{\\text{км}}{\\text{ч}}';
		let km = '~\\text{км}';

		genAssertZ1000(s0,'расстояние s0 слишком дробное');
		genAssertZ1000(s1,'расстояние s1 слишком дробное');
		genAssertZ1000(s2,'расстояние s2 слишком дробное');
		genAssertZ1000(v_avg,'Ответ слишком дробный');
		NAtask.setTask({
			text: (s0==1 ? 'Первый километр ' : 'Первыe $'+s0.ts()+km+'$ ')+transp.ie+
				[' ехал',' проехал'].iz()+['','а','о','и'][transp.rod]+' со скоростью $v_0='+v0.ts()+kmph+'$, '+
				(s1==1 ? 'следующий километр ' : 'следующие $' +s1.ts()+km+'$ ')+
				' — со скоростью  $v_1='+v1.ts()+kmph+'$, а затем $'+s2.ts()+km+'$ '+
				' — со скоростью  $v_2='+v2.ts()+kmph+'$. '+
				'Найдите среднюю скорость '+transp.re+' на протяжении всего пути. Ответ дайте в$'+kmph+'$.',
			answers: v_avg,
			authors: ['Aisse-258']
		});
	}, 200000);
})();
//Aisse-258
/*РешуЕГЭ 99607 116353 513342 513363 115855 115857 115859 115861 115863 115865
		115867 115869 115871 115873 115875 115877 115879 115881 115883 115885
		115887 115889 115891 115893 115895 115897 115899 115901 115903 115905
		115907 115909 115911 115913 115915 115917 115919 115921 115923 115925
		115927 115929 115931 115933 115935 115937 115939 115941 115943 115945
		115947 115949 115951 115953 115955 115957 115959 115961 115963 115965
		115967 115969 115971 115973 115975 115977 115979 115981 115983 115985
		115987 115989 115991 115993 115995 115997 115999 116001 116003 116005
		116007 116009 116011 116013 116015 116017 116019 116021 116023 116025
		116027 116029 116031 116033 116035 116037 116039 116041 116043 116045
		116047 116049 116051 116053 116055 116057 116059 116061 116063 116065
		116067 116069 116071 116073 116075 116077 116079 116081 116083 116085
		116087 116089 116091 116093 116095 116097 116099 116101 116103 116105
		116107 116109 116111 116113 116115 116117 116119 116121 116123 116125
		116127 116129 116131 116133 116135 116137 116139 116141 116143 116145
		116147 116149 116151 116153 116155 116157 116159 116161 116163 116165
		116167 116169 116171 116173 116175 116177 116179 116181 116183 116185
		116187 116189 116191 116193 116195 116197 116199 116201 116203 116205
		116207 116209 116211 116213 116215 116217 116219 116221 116223 116225
		116227 116229 116231 116233 116235 116237 116239 116241 116243 116245
		116247 116249 116251 116253 116255 116257 116259 116261 116263 116265
		116267 116269 116271 116273 116275 116277 116279 116281 116283 116285
		116287 116289 116291 116293 116295 116297 116299 116301 116303 116305
		116307 116309 116311 116313 116315 116317 116319 116321 116323 116325
		116327 116329 116331 116333 116335 116337 116339 116341 116343 116345
		116347 116349 116351 ...*/
