(function() {
	retryWhileError(function() {
		NAinfo.requireApiVersion(0, 2);

		let v0 = sl(10,100,0.01);//скорость1
		let v1 = sl(10,100,0.01);//скорость2
		let v2 = sl(10,100,0.01);//скорость3
		let t0 = sl(1,10,0.01);//время1
		let t1 = sl(1,10,0.01);//время2
		let t2 = sl(1,10,0.01);//время3
		let v_avg=(v0*t0+v1*t1+v2*t2)/(t0+t1+t2);//средняя скорость
		//TODO:заменить на встроенный массив транспорта
		let transp = sklonlxkand(['автомобиль','мотоцикл','велосипед','электросамокат','гироскутер','мотоциклист','велосипедист','машина','поезд','транспортное средство'].iz());
		let kmph = '\\dfrac{\\text{км}}{\\text{ч}}';

		genAssertZ1000(v_avg,'Ответ слишком дробный');
		NAtask.setTask({
			text: (t0==1 ? 'Первый час' : 'Первыe $'+t0+'$ '+ chislitlx(t0, 'час').split(" ")[1])+' '+transp.ie+
				' '+['ехал'+['','а','о','и'][transp.rod],'двигал'+['ся','ась','ось','ись'][transp.rod]].iz()+' со скоростью $v_0='+v0+'~'+kmph+'$, '+
				(t1==1 ? 'следующий час' : 'следующие $' +t1+'$ '+ chislitlx(t1, 'час').split(" ")[1])+
				' — со скоростью  $v_1='+v1+'~'+kmph+'$, а затем $'+t2+'$ '+
				chislitlx(t2, 'час').split(" ")[1]+' — со скоростью  $v_2='+v2+'~'+kmph+'$. '+
				'Найдите среднюю скорость '+transp.re+' на протяжении всего пути. Ответ дайте в $'+kmph+'$.',
			answers: v_avg,
			authors: ['Aisse-258']
		});
		NAtask.modifiers.allDecimalsToStandard();
	}, 20000);
})();
//Aisse-258
/*РешуЕГЭ 99606 115853 517157 115355
115357 115359 115361 115363 115365 115367 115369 115371 115373 115375
115377 115379 115381 115383 115385 115387 115389 115391 115393 115395
115397 115399 115401 115403 115405 115407 115409 115411 115413 115415
115417 115419 115421 115423 115425 115427 115429 115431 115433 115435
115437 115439 115441 115443 115445 115447 115449 115451 115453 115455
115457 115459 115461 115463 115465 115467 115469 115471 115473 115475
115477 115479 115481 115483 115485 115487 115489 115491 115493 115495
115497 115499 115501 115503 115505 115507 115509 115511 115513 115515
115517 115519 115521 115523 115525 115527 115529 115531 115533 115535
115537 115539 115541 115543 115545 115547 115549 115551 115553 115555
115557 115559 115561 115563 115565 115567 115569 115571 115573 115575
115577 115579 115581 115583 115585 115587 115589 115591 115593 115595
115597 115599 115601 115603 115605 115607 115609 115611 115613 115615
115617 115619 115621 115623 115625 115627 115629 115631 115633 115635
115637 115639 115641 115643 115645 115647 115649 115651 115653 115655
115657 115659 115661 115663 115665 115667 115669 115671 115673 115675
115677 115679 115681 115683 115685 115687 115689 115691 115693 115695
115697 115699 115701 115703 115705 115707 115709 115711 115713 115715
115717 115719 115721 115723 115725 115727 115729 115731 115733 115735
115737 115739 115741 115743 115745 115747 115749 115751 115753 115755
115757 115759 115761 115763 115765 115767 115769 115771 115773 115775
115777 115779 115781 115783 115785 115787 115789 115791 115793 115795
115797 115799 115801 115803 115805 115807 115809 115811 115813 115815
115817 115819 115821 115823 115825 115827 115829 115831 115833 115835
115837 115839 115841 115843 115845 115847 115849 115851 ...*/
